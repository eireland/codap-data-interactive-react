{"version":3,"sources":["components/header/navigation.jsx","utils/util.js","components/header/header.jsx","components/card/card.jsx","components/card-list/card-list.jsx","components/footer/footer.jsx","App.js","serviceWorker.js","index.js"],"names":["NavigationTabs","props","categories","plugins","categoryArray","queryParam","window","location","search","substr","map","plugin","forEach","category","includes","push","splice","indexOf","getCategories","categoryTooltip","tooltip","className","index","tip","filter","c","key","categorySelected","value","onClick","handleCategorySelect","Header","this","renderHeaderTitle","href","title","target","rel","src","alt","React","Component","Card","renderPluginTitleAndDescription","cleanPath","codapUrl","pluginPath","urlRoot","origin","pathname","path","match","replace","renderHTML","description","parse","DOMPurify","sanitize","url_root","url","PureComponent","CardList","cardlistWrapperClassNames","pluginsToShow","Footer","id","App","bind","state","dataInteractives","data_interactives","setState","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.285b08ae.chunk.js","sourcesContent":["import React from \"react\";\nimport { getCategories } from \"../../utils/util\";\nimport \"./navigation.css\"\n\nexport const NavigationTabs = (props) => {\n  const categories = getCategories(props.plugins);\n  const categoryTooltip = [{ category: \"Partners\", tooltip: \"Plugins developed with other project partners\" },\n                           { category: \"Utilities\", tooltip: \"Plugins developed to help developers\" },\n                           { category: \"Data Games\", tooltip: \"Plugins developed for Data Games project\" },\n                           { category: \"Data Worlds\", tooltip: \"Plugins developed for Data World project\" }\n                          ];\n\n  return (\n    <>\n      { categories && <div className=\"navigationTabs\">\n          {categories.map((category, index) => {\n            const tip = (categoryTooltip.filter(c => c.category === category))[0];\n            return (\n              <div key={`${index}`} className={`tab ${category} ${props.categorySelected === category ? \"selected\" : \"\"}`} value={category}\n                onClick={() => props.handleCategorySelect(category)}>\n                {category}\n                {tip && <span className=\"tooltipText\">{tip.tooltip}</span>}\n              </div>\n            )\n          }\n          )}\n        </div>\n      }\n    </>\n  );\n}\n","export function getCategories(plugins) {\n  let categoryArray = [];\n  let queryParam = window.location.search.substr(1);\n  \n// eslint-disable-next-line\n  plugins.map(plugin => {\n    plugin.categories.forEach(category => {\n      if (!categoryArray.includes(category)) {\n        categoryArray.push(category)\n      }\n    })\n  })\n  if (!queryParam.includes(\"dev\")) {\n    categoryArray.splice(categoryArray.indexOf(\"Utilities\"),1);\n  }\n  return categoryArray;\n}\n","import React from 'react';\nimport \"./header.css\"\nimport { NavigationTabs } from \"./navigation\";\n\nexport class Header extends React.Component {\n  render() {\n    return (\n      <div className=\"header\">\n        {this.renderHeaderTitle()}\n        <NavigationTabs plugins={this.props.plugins} categorySelected={this.props.categorySelected} handleCategorySelect={this.props.handleCategorySelect} />\n      </div>\n    );\n  }\n\n  renderHeaderTitle() {\n    return (\n      <div className=\"headerTitle\">\n        <div className=\"headerLeft\">\n        <a href=\"https://codap.concord.org/\" title=\"CODAP Project\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src=\"https://codap.concord.org/wp-content/themes/cc/img/codap-logo.png\" className=\"codap-logo\" alt=\"Common Online Data Analysis Program\" />\n        </a>\n        </div>\n        <div className=\"headerCenter\">\n          <span className=\"title\">CODAP Data Interactive Plugins</span>\n        </div>\n      </div>\n\n    )\n  }\n}","import React from \"react\";\nimport DOMPurify from \"dompurify\";\nimport parse from \"html-react-parser\";\n\nimport \"./card.css\"\n\nexport class Card extends React.PureComponent{\n  render(){\n    let cardClassNames = `card`\n    return (\n      <div className={cardClassNames}>\n        {this.renderPluginTitleAndDescription()}\n        <a className=\"embeddableLink\" href={this.cleanPath()} target=\"_blank\" rel=\"noopener noreferrer\">\n          Embeddable Link\n        </a>\n    </div>\n    );\n  }\n\n  renderPluginTitleAndDescription() {\n    let { plugin } = this.props;\n    let codapUrl = \"http://codap.concord.org/releases/latest/\";\n    let pluginPath = \"\";\n    let urlRoot = window.location.origin+window.location.pathname;\n    if (plugin.path.match(/^http/i)) {\n      pluginPath = plugin.path;\n    }\n    else {\n      urlRoot=urlRoot.replace(/index.html$/, '');\n      pluginPath = urlRoot+plugin.path;\n    }\n    if (codapUrl.match(/^https/i) && !pluginPath.match(/^https/i)) {\n      pluginPath=pluginPath.replace(/http/i,'https');\n    }\n\n    if (pluginPath.match(/^https/i) && !codapUrl.match(/^https/i)) {\n      codapUrl=codapUrl.replace(/http/i,'https');\n    }\n\n    return (\n      <a href={`${codapUrl}?di=${pluginPath}`} className=\"pluginTitle\" target=\"_blank\" rel=\"noopener noreferrer\">\n        {plugin.title}\n        <p className=\"pluginDescription\">{this.renderHTML(plugin.description)}</p>\n      </a>\n    );\n  }\n  renderHTML(description) {\n    return parse(DOMPurify.sanitize(description || \"\"));\n  }\n\n  cleanPath() {\n    const { plugin } = this.props;\n    let path = '';\n    let url_root=window.location.origin+window.location.pathname;\n    let url=\"https://codap.concord.org/app/\"\n\n    if (plugin.path.match(/^http/i)) {\n      path = plugin.path;\n    }\n    else {\n      url_root = url_root.replace(/index.html$/, '');\n      path = url_root + plugin.path;\n    }\n\n    if (url.match(/^https/i) && !path.match(/^https/i)) {\n      path = path.replace(/http/i, 'https');\n    }\n\n    if (path.match(/^https/i) && !url.match(/^https/i)) {\n      url = url.replace(/http/i, 'https');\n    }\n    return path;\n  }\n}\n\n","import React from \"react\";\nimport { Card } from \"../card/card\";\n\nimport \"./card-list.css\";\n\nexport const CardList = props => {\n  let { plugins, categorySelected } = props;\n  let cardlistWrapperClassNames = `cardlistWrapper ${categorySelected}`\n  let pluginsToShow = plugins.filter(plugin => plugin.categories.includes(categorySelected));\n  return (\n    <div className={cardlistWrapperClassNames}>\n      <div className=\"card-list\">\n        {pluginsToShow.map((plugin, index) =>\n          <Card key={index} plugin={plugin} />\n        )}\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport \"./footer.css\"\n\nexport class Footer extends React.Component {\n\n  render() {\n    return (\n      <div className=\"footer\">\n        <div id=\"cc\">\n            a product of\n            <div className=\"cc-logo\">\n              <a href=\"https://concord.org/\" title=\"The Concord Consortium - Revolutionary digital learning for science, math, and engineering\"><img src=\"http://codap.concord.org/_assets/img/cc-logo.png\" alt=\"The Concord Consortium\" />\n              </a>\n            </div>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport dataInteractives from \"./data_interactive_map.json\";\nimport { Header } from \"./components/header/header\";\nimport { CardList } from \"./components/card-list/card-list\";\nimport { Footer } from \"./components/footer/footer\";\n\nexport default class App extends React.PureComponent {\n  constructor() {\n    super();\n    this.handleCategorySelect = this.handleCategorySelect.bind(this);\n    this.state = {\n      dataInteractives: dataInteractives.data_interactives,\n      categorySelected: \"Partners\",\n    }\n  }\n\n  render() {\n    const plugins = this.state.dataInteractives;\n    const categorySelected = this.state.categorySelected;\n    return (\n      <div className=\"App\">\n        <Header plugins={plugins} categorySelected={categorySelected} handleCategorySelect={this.handleCategorySelect}  />\n        <CardList plugins={plugins} categorySelected={categorySelected} />\n        <Footer />\n      </div>\n    );\n  }\n\n  handleCategorySelect(category) {\n    this.setState({ categorySelected: category });\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}