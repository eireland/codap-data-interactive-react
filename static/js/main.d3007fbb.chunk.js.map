{"version":3,"sources":["components/header/navigation.jsx","utils/util.js","components/header/header.jsx","components/card/card.jsx","components/card-list/card-list.jsx","components/footer/footer.jsx","App.js","serviceWorker.js","index.js"],"names":["NavigationTabs","props","categories","plugins","categoryArray","map","plugin","forEach","category","includes","push","getCategories","console","log","categorySelected","className","index","key","value","onClick","handleCategorySelect","Header","this","renderHeaderTitle","href","title","target","rel","src","alt","React","Component","Card","replace","renderPluginTitle","renderHTML","description","cleanPath","codapUrl","pluginPath","urlRoot","window","location","origin","pathname","path","match","parse","DOMPurify","sanitize","url_root","url","PureComponent","CardList","cardlistWrapperClassNames","pluginsToShow","filter","Footer","id","App","bind","state","dataInteractives","data_interactives","setState","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d3007fbb.chunk.js","sourcesContent":["import React from \"react\";\nimport { getCategories } from \"../../utils/util\";\nimport \"./navigation.css\"\n\nexport const NavigationTabs = (props) => {\n  const categories = getCategories(props.plugins);\n  console.log(props.categorySelected);\n  return (\n    <>\n      <div className=\"navigationTabs\">\n        {categories.map((category, index) =>\n          <div key={`${index}`} className={`tab ${category} ${props.categorySelected === category ? \"selected\" : \"\"}`} value={category}\n            onClick={()=> props.handleCategorySelect(category)}>\n            {category}\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n","export function getCategories(plugins) {\n  let categoryArray = [];\n  plugins.map(plugin => {\n    plugin.categories.forEach(category => {\n      if (!categoryArray.includes(category)) {\n        categoryArray.push(category)\n      }\n    })\n  })\n  return categoryArray;\n}","import React from 'react';\nimport \"./header.css\"\nimport { NavigationTabs } from \"./navigation\";\n\nexport class Header extends React.Component {\n  render() {\n    return (\n      <div className=\"header\">\n        {this.renderHeaderTitle()}\n        <NavigationTabs plugins={this.props.plugins} categorySelected={this.props.categorySelected} handleCategorySelect={this.props.handleCategorySelect} />\n      </div>\n    );\n  }\n\n  renderHeaderTitle() {\n    return (\n      <div className=\"headerTitle\">\n        <div className=\"headerLeft\">\n        <a href=\"https://codap.concord.org/\" title=\"CODAP Project\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src=\"https://codap.concord.org/wp-content/themes/cc/img/codap-logo.png\" className=\"codap-logo\" alt=\"Common Online Data Analysis Program\" />\n        </a>\n        </div>\n        <div className=\"headerCenter\">\n          <span className=\"title\">CODAP Data Interactive Plugins</span>\n        </div>\n      </div>\n\n    )\n  }\n}","import React from \"react\";\nimport DOMPurify from \"dompurify\";\nimport parse from \"html-react-parser\";\n\nimport \"./card.css\"\n\nexport class Card extends React.PureComponent{\n  // constructor(props){\n  //   super();\n  // }\n\n  render(){\n    let { plugin } = this.props;\n    let categoryClassName = plugin.categories[0].replace(\" \",\"-\");\n    // let cardClassNames = `card ${categoryClassName}`\n    let cardClassNames = `card`\n    return (\n      <div className={cardClassNames}>\n        {this.renderPluginTitle()}\n        <p className=\"pluginDescription\">{this.renderHTML(plugin.description)}</p>\n        <a className=\"embeddableLink\" href={this.cleanPath()} target=\"_blank\" rel=\"noopener noreferrer\">\n          Embeddable Link\n        </a>\n    </div>\n    );\n  }\n\n  renderPluginTitle() {\n    let { plugin } = this.props;\n    let codapUrl = \"http://codap.concord.org/releases/latest/\";\n    let pluginPath = \"\";\n    let urlRoot = window.location.origin+window.location.pathname;\n    if (plugin.path.match(/^http/i)) {\n      pluginPath = plugin.path;\n    }\n    else {\n      urlRoot=urlRoot.replace(/index.html$/, '');\n      pluginPath = urlRoot+plugin.path;\n    }\n    if (codapUrl.match(/^https/i) && !pluginPath.match(/^https/i)) {\n      pluginPath=pluginPath.replace(/http/i,'https');\n    }\n\n    if (pluginPath.match(/^https/i) && !codapUrl.match(/^https/i)) {\n      codapUrl=codapUrl.replace(/http/i,'https');\n    }\n\n    return (\n      <a href={`${codapUrl}?di=${pluginPath}`} className=\"pluginTitle\" target=\"_blank\" rel=\"noopener noreferrer\">\n        {plugin.title}\n      </a>\n    );\n  }\n  renderHTML(description) {\n    return parse(DOMPurify.sanitize(description || \"\"));\n  }\n\n  cleanPath() {\n    const { plugin } = this.props;\n    let path = '';\n    let url_root=window.location.origin+window.location.pathname;\n    let url=\"https://codap.concord.org/app/\"\n\n    if (plugin.path.match(/^http/i)) {\n      path = plugin.path;\n    }\n    else {\n      url_root = url_root.replace(/index.html$/, '');\n      path = url_root + plugin.path;\n    }\n\n    if (url.match(/^https/i) && !path.match(/^https/i)) {\n      path = path.replace(/http/i, 'https');\n    }\n\n    if (path.match(/^https/i) && !url.match(/^https/i)) {\n      url = url.replace(/http/i, 'https');\n    }\n    return path;\n  }\n}\n\n","import React from \"react\";\nimport { Card } from \"../card/card\";\n\nimport \"./card-list.css\";\n\nexport const CardList = props => {\n  let { plugins, categorySelected } = props;\n  let cardlistWrapperClassNames = `cardlistWrapper ${categorySelected}`\n  let pluginsToShow = plugins.filter(plugin => plugin.categories.includes(categorySelected));\n  return (\n    <div className={cardlistWrapperClassNames}>\n      <div className=\"card-list\">\n        {pluginsToShow.map((plugin, index) =>\n          <Card key={index} plugin={plugin} />\n        )}\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport \"./footer.css\"\n\nexport class Footer extends React.Component {\n\n  render() {\n    return (\n      <div className=\"footer\">\n        <div id=\"cc\">\n            a product of\n            <div className=\"cc-logo\">\n              <a href=\"https://concord.org/\" title=\"The Concord Consortium - Revolutionary digital learning for science, math, and engineering\"><img src=\"http://codap.concord.org/_assets/img/cc-logo.png\" alt=\"The Concord Consortium\" />\n              </a>\n            </div>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport dataInteractives from \"./data_interactive_map.json\";\nimport { Header } from \"./components/header/header\";\nimport { CardList } from \"./components/card-list/card-list\";\nimport { Footer } from \"./components/footer/footer\";\n\nexport default class App extends React.PureComponent {\n  constructor() {\n    super();\n    this.handleCategorySelect = this.handleCategorySelect.bind(this);\n    this.state = {\n      dataInteractives: dataInteractives.data_interactives,\n      categorySelected: \"Partners\",\n    }\n  }\n\n  render() {\n    const plugins = this.state.dataInteractives;\n    const categorySelected = this.state.categorySelected;\n    return (\n      <div className=\"App\">\n        <Header plugins={plugins} categorySelected={categorySelected} handleCategorySelect={this.handleCategorySelect}  />\n        <CardList plugins={plugins} categorySelected={categorySelected} />\n        <Footer />\n      </div>\n    );\n  }\n\n  handleCategorySelect(category) {\n    this.setState({ categorySelected: category });\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}